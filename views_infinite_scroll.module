<?php
/**
 * @file
 * Module file for views_infinite_scroll.
 */

/**
 * Implements hook_preprocess_views_infinite_scroll_pager().
 */
function views_infinite_scroll_preprocess_views_infinite_scroll_pager(&$vars) {
  // The important parts we needed lifted wholesale from
  // template_preprocess_views_mini_pager().
  global $pager_page_array, $pager_total;
  $element = $vars['element'];
  $parameters = $vars['parameters'];
  if ($pager_page_array[$element] < ($pager_total[$element] - 1)) {
    $options = array(
      'query' => pager_query_add_page($parameters, $element, $pager_page_array[$element] + 1),
    );
    $vars['items']['next']['href'] = \Drupal::url('<current>', [], $options);
  }
  $vars['#cache']['contexts'][] = 'url.query_args';
}

/**
 * Implements hook_views_ajax_data_alter().
 */
function views_infinite_scroll_ajax_render_alter(array &$commands) {
  // The magic behind the module. Instead of using a library, use the ajax
  // commands sent to the client to append the view content instead of replacing
  // it during an ajax refresh.
  if (!isset($_POST['page']) || !isset($_POST['view_name'])) {
    return;
  }

  // ViewAjaxController strips all information out of the request object,
  // and we do not have hook_views_ajax_data_alter. I hate this, but can't see
  // another way to determine if the current AJAX pagination is from a VIS
  // enabled view. Perhaps look at the string contents of the commands and check
  // for pager markup? @todo
  $view = \Drupal::service('entity.manager')->getStorage('view')->load($_POST['view_name'])->getExecutable();
  $view->setDisplay($_POST['view_display_id']);
  $pager = $view->getPager();

  if ($pager->getPluginId() !== 'infinite_scroll') {
    return;
  }

  $views_replace_command = FALSE;
  foreach ($commands as $delta => &$command) {
    if ($command['command'] === 'viewsScrollTop') {
      $views_replace_command = TRUE;
      unset($commands[$delta]);
      continue;
    }
    if ($views_replace_command) {
      $command['method'] = 'infiniteScrollInsertView';
    }
  }
}
